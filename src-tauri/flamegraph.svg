<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1462" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1445.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1445.00"> </text><svg id="frames" x="10" width="1180" total_samples="20"><g><title>6128939008 (1 samples, 5.00%)</title><rect x="0.0000%" y="1397" width="5.0000%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1407.50">612893..</text></g><g><title>__pthread_deallocate (1 samples, 5.00%)</title><rect x="0.0000%" y="1381" width="5.0000%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1391.50">__pthr..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 5.00%)</title><rect x="0.0000%" y="1365" width="5.0000%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1375.50">std::s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="0.0000%" y="1349" width="5.0000%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1359.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="0.0000%" y="1333" width="5.0000%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1343.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 5.00%)</title><rect x="0.0000%" y="1317" width="5.0000%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1327.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="1301" width="5.0000%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1311.50">std::t..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.00%)</title><rect x="0.0000%" y="1285" width="5.0000%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1295.50">std::p..</text></g><g><title>std::panicking::try (1 samples, 5.00%)</title><rect x="0.0000%" y="1269" width="5.0000%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50">std::p..</text></g><g><title>___rust_try (1 samples, 5.00%)</title><rect x="0.0000%" y="1253" width="5.0000%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1263.50">___rus..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.00%)</title><rect x="0.0000%" y="1237" width="5.0000%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="0.0000%" y="1221" width="5.0000%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="1205" width="5.0000%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50">std::t..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 5.00%)</title><rect x="0.0000%" y="1189" width="5.0000%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="1173" width="5.0000%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50">tokio:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 5.00%)</title><rect x="0.0000%" y="1157" width="5.0000%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50">tokio:..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (1 samples, 5.00%)</title><rect x="0.0000%" y="1141" width="5.0000%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50">tokio:..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 5.00%)</title><rect x="0.0000%" y="1125" width="5.0000%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 5.00%)</title><rect x="0.0000%" y="1109" width="5.0000%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1119.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 5.00%)</title><rect x="0.0000%" y="1093" width="5.0000%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1103.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="0.0000%" y="1077" width="5.0000%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 5.00%)</title><rect x="0.0000%" y="1061" width="5.0000%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 5.00%)</title><rect x="0.0000%" y="1045" width="5.0000%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50">tokio:..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.00%)</title><rect x="0.0000%" y="1029" width="5.0000%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50">std::p..</text></g><g><title>std::panicking::try (1 samples, 5.00%)</title><rect x="0.0000%" y="1013" width="5.0000%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50">std::p..</text></g><g><title>___rust_try (1 samples, 5.00%)</title><rect x="0.0000%" y="997" width="5.0000%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50">___rus..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.00%)</title><rect x="0.0000%" y="981" width="5.0000%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="0.0000%" y="965" width="5.0000%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50">&lt;core:..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="949" width="5.0000%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="0.0000%" y="933" width="5.0000%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 5.00%)</title><rect x="0.0000%" y="917" width="5.0000%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="901" width="5.0000%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 5.00%)</title><rect x="0.0000%" y="885" width="5.0000%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="869" width="5.0000%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 5.00%)</title><rect x="0.0000%" y="853" width="5.0000%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 5.00%)</title><rect x="0.0000%" y="837" width="5.0000%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="821" width="5.0000%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50">tokio:..</text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 5.00%)</title><rect x="0.0000%" y="805" width="5.0000%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50">tokio:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 5.00%)</title><rect x="0.0000%" y="789" width="5.0000%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 5.00%)</title><rect x="0.0000%" y="773" width="5.0000%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50">std::t..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="757" width="5.0000%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (1 samples, 5.00%)</title><rect x="0.0000%" y="741" width="5.0000%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (1 samples, 5.00%)</title><rect x="0.0000%" y="725" width="5.0000%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 5.00%)</title><rect x="0.0000%" y="709" width="5.0000%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (1 samples, 5.00%)</title><rect x="0.0000%" y="693" width="5.0000%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 5.00%)</title><rect x="0.0000%" y="677" width="5.0000%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 5.00%)</title><rect x="0.0000%" y="661" width="5.0000%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (1 samples, 5.00%)</title><rect x="0.0000%" y="645" width="5.0000%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (1 samples, 5.00%)</title><rect x="0.0000%" y="629" width="5.0000%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50">tokio:..</text></g><g><title>std::sync::condvar::Condvar::wait (1 samples, 5.00%)</title><rect x="0.0000%" y="613" width="5.0000%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50">std::s..</text></g><g><title>std::sys::sync::condvar::pthread::Condvar::wait (1 samples, 5.00%)</title><rect x="0.0000%" y="597" width="5.0000%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">std::s..</text></g><g><title>__pthread_cond_wait (1 samples, 5.00%)</title><rect x="0.0000%" y="581" width="5.0000%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50">__pthr..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="0.0000%" y="565" width="5.0000%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="0.0000%" y="549" width="5.0000%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="0.0000%" y="533" width="5.0000%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50">backtr..</text></g><g><title>6148255744 (1 samples, 5.00%)</title><rect x="5.0000%" y="1397" width="5.0000%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1407.50">614825..</text></g><g><title>__pthread_deallocate (1 samples, 5.00%)</title><rect x="5.0000%" y="1381" width="5.0000%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1391.50">__pthr..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 5.00%)</title><rect x="5.0000%" y="1365" width="5.0000%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1375.50">std::s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="5.0000%" y="1349" width="5.0000%" height="15" fill="rgb(209,12,38)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1359.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="5.0000%" y="1333" width="5.0000%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1343.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 5.00%)</title><rect x="5.0000%" y="1317" width="5.0000%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1327.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="1301" width="5.0000%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1311.50">std::t..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.00%)</title><rect x="5.0000%" y="1285" width="5.0000%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1295.50">std::p..</text></g><g><title>std::panicking::try (1 samples, 5.00%)</title><rect x="5.0000%" y="1269" width="5.0000%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1279.50">std::p..</text></g><g><title>___rust_try (1 samples, 5.00%)</title><rect x="5.0000%" y="1253" width="5.0000%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1263.50">___rus..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.00%)</title><rect x="5.0000%" y="1237" width="5.0000%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1247.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="5.0000%" y="1221" width="5.0000%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1231.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="1205" width="5.0000%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1215.50">std::t..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 5.00%)</title><rect x="5.0000%" y="1189" width="5.0000%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1199.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="1173" width="5.0000%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1183.50">tokio:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 5.00%)</title><rect x="5.0000%" y="1157" width="5.0000%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1167.50">tokio:..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (1 samples, 5.00%)</title><rect x="5.0000%" y="1141" width="5.0000%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1151.50">tokio:..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 5.00%)</title><rect x="5.0000%" y="1125" width="5.0000%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1135.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="1109" width="5.0000%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1119.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="1093" width="5.0000%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1103.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="1077" width="5.0000%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1087.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 5.00%)</title><rect x="5.0000%" y="1061" width="5.0000%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1071.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 5.00%)</title><rect x="5.0000%" y="1045" width="5.0000%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1055.50">tokio:..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.00%)</title><rect x="5.0000%" y="1029" width="5.0000%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1039.50">std::p..</text></g><g><title>std::panicking::try (1 samples, 5.00%)</title><rect x="5.0000%" y="1013" width="5.0000%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1023.50">std::p..</text></g><g><title>___rust_try (1 samples, 5.00%)</title><rect x="5.0000%" y="997" width="5.0000%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="1"/><text x="5.2500%" y="1007.50">___rus..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.00%)</title><rect x="5.0000%" y="981" width="5.0000%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="1"/><text x="5.2500%" y="991.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="5.0000%" y="965" width="5.0000%" height="15" fill="rgb(211,81,21)" fg:x="1" fg:w="1"/><text x="5.2500%" y="975.50">&lt;core:..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="949" width="5.0000%" height="15" fill="rgb(208,190,38)" fg:x="1" fg:w="1"/><text x="5.2500%" y="959.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="933" width="5.0000%" height="15" fill="rgb(235,213,38)" fg:x="1" fg:w="1"/><text x="5.2500%" y="943.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 5.00%)</title><rect x="5.0000%" y="917" width="5.0000%" height="15" fill="rgb(237,122,38)" fg:x="1" fg:w="1"/><text x="5.2500%" y="927.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="901" width="5.0000%" height="15" fill="rgb(244,218,35)" fg:x="1" fg:w="1"/><text x="5.2500%" y="911.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="885" width="5.0000%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="1"/><text x="5.2500%" y="895.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="869" width="5.0000%" height="15" fill="rgb(210,16,53)" fg:x="1" fg:w="1"/><text x="5.2500%" y="879.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 5.00%)</title><rect x="5.0000%" y="853" width="5.0000%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="1"/><text x="5.2500%" y="863.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 5.00%)</title><rect x="5.0000%" y="837" width="5.0000%" height="15" fill="rgb(224,169,11)" fg:x="1" fg:w="1"/><text x="5.2500%" y="847.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="821" width="5.0000%" height="15" fill="rgb(250,166,2)" fg:x="1" fg:w="1"/><text x="5.2500%" y="831.50">tokio:..</text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 5.00%)</title><rect x="5.0000%" y="805" width="5.0000%" height="15" fill="rgb(242,216,29)" fg:x="1" fg:w="1"/><text x="5.2500%" y="815.50">tokio:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 5.00%)</title><rect x="5.0000%" y="789" width="5.0000%" height="15" fill="rgb(230,116,27)" fg:x="1" fg:w="1"/><text x="5.2500%" y="799.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 5.00%)</title><rect x="5.0000%" y="773" width="5.0000%" height="15" fill="rgb(228,99,48)" fg:x="1" fg:w="1"/><text x="5.2500%" y="783.50">std::t..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="757" width="5.0000%" height="15" fill="rgb(253,11,6)" fg:x="1" fg:w="1"/><text x="5.2500%" y="767.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (1 samples, 5.00%)</title><rect x="5.0000%" y="741" width="5.0000%" height="15" fill="rgb(247,143,39)" fg:x="1" fg:w="1"/><text x="5.2500%" y="751.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="725" width="5.0000%" height="15" fill="rgb(236,97,10)" fg:x="1" fg:w="1"/><text x="5.2500%" y="735.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 5.00%)</title><rect x="5.0000%" y="709" width="5.0000%" height="15" fill="rgb(233,208,19)" fg:x="1" fg:w="1"/><text x="5.2500%" y="719.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 5.00%)</title><rect x="5.0000%" y="693" width="5.0000%" height="15" fill="rgb(216,164,2)" fg:x="1" fg:w="1"/><text x="5.2500%" y="703.50">tokio:..</text></g><g><title>tokio::runtime::coop::budget (1 samples, 5.00%)</title><rect x="5.0000%" y="677" width="5.0000%" height="15" fill="rgb(220,129,5)" fg:x="1" fg:w="1"/><text x="5.2500%" y="687.50">tokio:..</text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 5.00%)</title><rect x="5.0000%" y="661" width="5.0000%" height="15" fill="rgb(242,17,10)" fg:x="1" fg:w="1"/><text x="5.2500%" y="671.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="645" width="5.0000%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="1"/><text x="5.2500%" y="655.50">tokio:..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 5.00%)</title><rect x="5.0000%" y="629" width="5.0000%" height="15" fill="rgb(251,28,31)" fg:x="1" fg:w="1"/><text x="5.2500%" y="639.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="613" width="5.0000%" height="15" fill="rgb(233,223,10)" fg:x="1" fg:w="1"/><text x="5.2500%" y="623.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="597" width="5.0000%" height="15" fill="rgb(215,21,27)" fg:x="1" fg:w="1"/><text x="5.2500%" y="607.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="581" width="5.0000%" height="15" fill="rgb(232,23,21)" fg:x="1" fg:w="1"/><text x="5.2500%" y="591.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 5.00%)</title><rect x="5.0000%" y="565" width="5.0000%" height="15" fill="rgb(244,5,23)" fg:x="1" fg:w="1"/><text x="5.2500%" y="575.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 5.00%)</title><rect x="5.0000%" y="549" width="5.0000%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="1"/><text x="5.2500%" y="559.50">tokio:..</text></g><g><title>std::panic::catch_unwind (1 samples, 5.00%)</title><rect x="5.0000%" y="533" width="5.0000%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="1"/><text x="5.2500%" y="543.50">std::p..</text></g><g><title>std::panicking::try (1 samples, 5.00%)</title><rect x="5.0000%" y="517" width="5.0000%" height="15" fill="rgb(212,68,19)" fg:x="1" fg:w="1"/><text x="5.2500%" y="527.50">std::p..</text></g><g><title>___rust_try (1 samples, 5.00%)</title><rect x="5.0000%" y="501" width="5.0000%" height="15" fill="rgb(240,187,13)" fg:x="1" fg:w="1"/><text x="5.2500%" y="511.50">___rus..</text></g><g><title>std::panicking::try::do_call (1 samples, 5.00%)</title><rect x="5.0000%" y="485" width="5.0000%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="1"/><text x="5.2500%" y="495.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="5.0000%" y="469" width="5.0000%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="1"/><text x="5.2500%" y="479.50">&lt;core:..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="453" width="5.0000%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="1"/><text x="5.2500%" y="463.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="437" width="5.0000%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="1"/><text x="5.2500%" y="447.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 5.00%)</title><rect x="5.0000%" y="421" width="5.0000%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="1"/><text x="5.2500%" y="431.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="405" width="5.0000%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="1"/><text x="5.2500%" y="415.50">tokio:..</text></g><g><title>subtle::handle_user::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="389" width="5.0000%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="1"/><text x="5.2500%" y="399.50">subtle..</text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (1 samples, 5.00%)</title><rect x="5.0000%" y="373" width="5.0000%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="1"/><text x="5.2500%" y="383.50">&lt;futur..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_sink::Sink&lt;tungstenite::protocol::message::Message&gt;&gt;::poll_flush (1 samples, 5.00%)</title><rect x="5.0000%" y="357" width="5.0000%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="1"/><text x="5.2500%" y="367.50">&lt;tokio..</text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (1 samples, 5.00%)</title><rect x="5.0000%" y="341" width="5.0000%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="1"/><text x="5.2500%" y="351.50">tokio_..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_sink::Sink&lt;tungstenite::protocol::message::Message&gt;&gt;::poll_flush::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="325" width="5.0000%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="1"/><text x="5.2500%" y="335.50">&lt;tokio..</text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::flush (1 samples, 5.00%)</title><rect x="5.0000%" y="309" width="5.0000%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="1"/><text x="5.2500%" y="319.50">tungst..</text></g><g><title>tungstenite::protocol::WebSocketContext::flush (1 samples, 5.00%)</title><rect x="5.0000%" y="293" width="5.0000%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="1"/><text x="5.2500%" y="303.50">tungst..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::write_out_buffer (1 samples, 5.00%)</title><rect x="5.0000%" y="277" width="5.0000%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="1"/><text x="5.2500%" y="287.50">tungst..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::write (1 samples, 5.00%)</title><rect x="5.0000%" y="261" width="5.0000%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="1"/><text x="5.2500%" y="271.50">&lt;tokio..</text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (1 samples, 5.00%)</title><rect x="5.0000%" y="245" width="5.0000%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="1"/><text x="5.2500%" y="255.50">tokio_..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::write::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="229" width="5.0000%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="1"/><text x="5.2500%" y="239.50">&lt;tokio..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 5.00%)</title><rect x="5.0000%" y="213" width="5.0000%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="1"/><text x="5.2500%" y="223.50">&lt;tokio..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 5.00%)</title><rect x="5.0000%" y="197" width="5.0000%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="1"/><text x="5.2500%" y="207.50">tokio:..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 5.00%)</title><rect x="5.0000%" y="181" width="5.0000%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="1"/><text x="5.2500%" y="191.50">tokio:..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 5.00%)</title><rect x="5.0000%" y="165" width="5.0000%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="1"/><text x="5.2500%" y="175.50">&lt;&amp;mio:..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 5.00%)</title><rect x="5.0000%" y="149" width="5.0000%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="1"/><text x="5.2500%" y="159.50">mio::i..</text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (1 samples, 5.00%)</title><rect x="5.0000%" y="133" width="5.0000%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="1"/><text x="5.2500%" y="143.50">mio::s..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (1 samples, 5.00%)</title><rect x="5.0000%" y="117" width="5.0000%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="1"/><text x="5.2500%" y="127.50">&lt;&amp;mio:..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 5.00%)</title><rect x="5.0000%" y="101" width="5.0000%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="1"/><text x="5.2500%" y="111.50">&lt;&amp;std:..</text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 5.00%)</title><rect x="5.0000%" y="85" width="5.0000%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="1"/><text x="5.2500%" y="95.50">std::s..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="5.0000%" y="69" width="5.0000%" height="15" fill="rgb(215,41,42)" fg:x="1" fg:w="1"/><text x="5.2500%" y="79.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="5.0000%" y="53" width="5.0000%" height="15" fill="rgb(224,123,36)" fg:x="1" fg:w="1"/><text x="5.2500%" y="63.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="5.0000%" y="37" width="5.0000%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="1"/><text x="5.2500%" y="47.50">backtr..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 10.00%)</title><rect x="10.0000%" y="1381" width="10.0000%" height="15" fill="rgb(205,98,50)" fg:x="2" fg:w="2"/><text x="10.2500%" y="1391.50">&lt;pprof::backtr..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 10.00%)</title><rect x="10.0000%" y="1365" width="10.0000%" height="15" fill="rgb(205,185,37)" fg:x="2" fg:w="2"/><text x="10.2500%" y="1375.50">backtrace::bac..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 10.00%)</title><rect x="10.0000%" y="1349" width="10.0000%" height="15" fill="rgb(238,207,15)" fg:x="2" fg:w="2"/><text x="10.2500%" y="1359.50">backtrace::bac..</text></g><g><title>_avcodec_default_get_buffer2 (12 samples, 60.00%)</title><rect x="20.0000%" y="1381" width="60.0000%" height="15" fill="rgb(213,199,42)" fg:x="4" fg:w="12"/><text x="20.2500%" y="1391.50">_avcodec_default_get_buffer2</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (12 samples, 60.00%)</title><rect x="20.0000%" y="1365" width="60.0000%" height="15" fill="rgb(235,201,11)" fg:x="4" fg:w="12"/><text x="20.2500%" y="1375.50">&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace</text></g><g><title>backtrace::backtrace::trace_unsynchronized (12 samples, 60.00%)</title><rect x="20.0000%" y="1349" width="60.0000%" height="15" fill="rgb(207,46,11)" fg:x="4" fg:w="12"/><text x="20.2500%" y="1359.50">backtrace::backtrace::trace_unsynchronized</text></g><g><title>backtrace::backtrace::libunwind::trace (12 samples, 60.00%)</title><rect x="20.0000%" y="1333" width="60.0000%" height="15" fill="rgb(241,35,35)" fg:x="4" fg:w="12"/><text x="20.2500%" y="1343.50">backtrace::backtrace::libunwind::trace</text></g><g><title>_avformat_get_mov_audio_tags (1 samples, 5.00%)</title><rect x="80.0000%" y="1381" width="5.0000%" height="15" fill="rgb(243,32,47)" fg:x="16" fg:w="1"/><text x="80.2500%" y="1391.50">_avfor..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="80.0000%" y="1365" width="5.0000%" height="15" fill="rgb(247,202,23)" fg:x="16" fg:w="1"/><text x="80.2500%" y="1375.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="80.0000%" y="1349" width="5.0000%" height="15" fill="rgb(219,102,11)" fg:x="16" fg:w="1"/><text x="80.2500%" y="1359.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="80.0000%" y="1333" width="5.0000%" height="15" fill="rgb(243,110,44)" fg:x="16" fg:w="1"/><text x="80.2500%" y="1343.50">backtr..</text></g><g><title>_avpriv_h264_has_num_reorder_frames (1 samples, 5.00%)</title><rect x="85.0000%" y="1381" width="5.0000%" height="15" fill="rgb(222,74,54)" fg:x="17" fg:w="1"/><text x="85.2500%" y="1391.50">_avpri..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="85.0000%" y="1365" width="5.0000%" height="15" fill="rgb(216,99,12)" fg:x="17" fg:w="1"/><text x="85.2500%" y="1375.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="85.0000%" y="1349" width="5.0000%" height="15" fill="rgb(226,22,26)" fg:x="17" fg:w="1"/><text x="85.2500%" y="1359.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="85.0000%" y="1333" width="5.0000%" height="15" fill="rgb(217,163,10)" fg:x="17" fg:w="1"/><text x="85.2500%" y="1343.50">backtr..</text></g><g><title>subtle::media::send_done (1 samples, 5.00%)</title><rect x="90.0000%" y="1189" width="5.0000%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1199.50">subtle..</text></g><g><title>tauri::ipc::channel::Channel&lt;TSend&gt;::send (1 samples, 5.00%)</title><rect x="90.0000%" y="1173" width="5.0000%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1183.50">tauri:..</text></g><g><title>tauri::ipc::channel::JavaScriptChannelId::channel_on::{{closure}} (1 samples, 5.00%)</title><rect x="90.0000%" y="1157" width="5.0000%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1167.50">tauri:..</text></g><g><title>tauri::webview::Webview&lt;R&gt;::eval (1 samples, 5.00%)</title><rect x="90.0000%" y="1141" width="5.0000%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1151.50">tauri:..</text></g><g><title>&lt;tauri_runtime_wry::WryWebviewDispatcher&lt;T&gt; as tauri_runtime::WebviewDispatch&lt;T&gt;&gt;::eval_script (1 samples, 5.00%)</title><rect x="90.0000%" y="1125" width="5.0000%" height="15" fill="rgb(252,8,32)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1135.50">&lt;tauri..</text></g><g><title>tauri_runtime_wry::send_user_message (1 samples, 5.00%)</title><rect x="90.0000%" y="1109" width="5.0000%" height="15" fill="rgb(223,20,43)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1119.50">tauri_..</text></g><g><title>tauri_runtime_wry::handle_user_message (1 samples, 5.00%)</title><rect x="90.0000%" y="1093" width="5.0000%" height="15" fill="rgb(229,81,49)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1103.50">tauri_..</text></g><g><title>wry::WebView::evaluate_script (1 samples, 5.00%)</title><rect x="90.0000%" y="1077" width="5.0000%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1087.50">wry::W..</text></g><g><title>wry::wkwebview::InnerWebView::eval (1 samples, 5.00%)</title><rect x="90.0000%" y="1061" width="5.0000%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1071.50">wry::w..</text></g><g><title>objc2_web_kit::generated::__WKWebView::WKWebView::evaluateJavaScript_completionHandler (1 samples, 5.00%)</title><rect x="90.0000%" y="1045" width="5.0000%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1055.50">objc2_..</text></g><g><title>objc2::__macro_helpers::msg_send::MsgSend::send_message (1 samples, 5.00%)</title><rect x="90.0000%" y="1029" width="5.0000%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1039.50">objc2:..</text></g><g><title>objc2::runtime::message_receiver::MessageReceiver::send_message (1 samples, 5.00%)</title><rect x="90.0000%" y="1013" width="5.0000%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1023.50">objc2:..</text></g><g><title>objc2::exception::catch (1 samples, 5.00%)</title><rect x="90.0000%" y="997" width="5.0000%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="1"/><text x="90.2500%" y="1007.50">objc2:..</text></g><g><title>objc2::exception::try_no_ret (1 samples, 5.00%)</title><rect x="90.0000%" y="981" width="5.0000%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="1"/><text x="90.2500%" y="991.50">objc2:..</text></g><g><title>rust_objc_sys_0_3_try_catch_exception (1 samples, 5.00%)</title><rect x="90.0000%" y="965" width="5.0000%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="1"/><text x="90.2500%" y="975.50">rust_o..</text></g><g><title>objc2::exception::try_no_ret::try_objc_execute_closure (1 samples, 5.00%)</title><rect x="90.0000%" y="949" width="5.0000%" height="15" fill="rgb(249,83,47)" fg:x="18" fg:w="1"/><text x="90.2500%" y="959.50">objc2:..</text></g><g><title>objc2::exception::catch::{{closure}} (1 samples, 5.00%)</title><rect x="90.0000%" y="933" width="5.0000%" height="15" fill="rgb(215,43,3)" fg:x="18" fg:w="1"/><text x="90.2500%" y="943.50">objc2:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 5.00%)</title><rect x="90.0000%" y="917" width="5.0000%" height="15" fill="rgb(238,154,13)" fg:x="18" fg:w="1"/><text x="90.2500%" y="927.50">&lt;core:..</text></g><g><title>objc2::runtime::message_receiver::MessageReceiver::send_message::{{closure}} (1 samples, 5.00%)</title><rect x="90.0000%" y="901" width="5.0000%" height="15" fill="rgb(219,56,2)" fg:x="18" fg:w="1"/><text x="90.2500%" y="911.50">objc2:..</text></g><g><title>objc2::runtime::message_receiver::msg_send_primitive::send (1 samples, 5.00%)</title><rect x="90.0000%" y="885" width="5.0000%" height="15" fill="rgb(233,0,4)" fg:x="18" fg:w="1"/><text x="90.2500%" y="895.50">objc2:..</text></g><g><title>&lt;(A,B) as objc2::encode::EncodeArguments&gt;::__invoke (1 samples, 5.00%)</title><rect x="90.0000%" y="869" width="5.0000%" height="15" fill="rgb(235,30,7)" fg:x="18" fg:w="1"/><text x="90.2500%" y="879.50">&lt;(A,B)..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="90.0000%" y="853" width="5.0000%" height="15" fill="rgb(250,79,13)" fg:x="18" fg:w="1"/><text x="90.2500%" y="863.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="90.0000%" y="837" width="5.0000%" height="15" fill="rgb(211,146,34)" fg:x="18" fg:w="1"/><text x="90.2500%" y="847.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="90.0000%" y="821" width="5.0000%" height="15" fill="rgb(228,22,38)" fg:x="18" fg:w="1"/><text x="90.2500%" y="831.50">backtr..</text></g><g><title>all (20 samples, 100%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="20"/><text x="0.2500%" y="1423.50"></text></g><g><title>8449275968 (18 samples, 90.00%)</title><rect x="10.0000%" y="1397" width="90.0000%" height="15" fill="rgb(221,155,16)" fg:x="2" fg:w="18"/><text x="10.2500%" y="1407.50">8449275968</text></g><g><title>wry::wkwebview::class::url_scheme_handler::start_task (2 samples, 10.00%)</title><rect x="90.0000%" y="1381" width="10.0000%" height="15" fill="rgb(215,215,53)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1391.50">wry::wkwebview..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 10.00%)</title><rect x="90.0000%" y="1365" width="10.0000%" height="15" fill="rgb(223,4,10)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1375.50">&lt;alloc::boxed:..</text></g><g><title>tauri_runtime_wry::create_webview::{{closure}} (2 samples, 10.00%)</title><rect x="90.0000%" y="1349" width="10.0000%" height="15" fill="rgb(234,103,6)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1359.50">tauri_runtime_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 10.00%)</title><rect x="90.0000%" y="1333" width="10.0000%" height="15" fill="rgb(227,97,0)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1343.50">&lt;alloc::boxed:..</text></g><g><title>tauri::manager::webview::WebviewManager&lt;R&gt;::prepare_pending_webview::{{closure}} (2 samples, 10.00%)</title><rect x="90.0000%" y="1317" width="10.0000%" height="15" fill="rgb(234,150,53)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1327.50">tauri::manager..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 10.00%)</title><rect x="90.0000%" y="1301" width="10.0000%" height="15" fill="rgb(228,201,54)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1311.50">&lt;alloc::boxed:..</text></g><g><title>tauri::ipc::protocol::get::{{closure}} (2 samples, 10.00%)</title><rect x="90.0000%" y="1285" width="10.0000%" height="15" fill="rgb(222,22,37)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1295.50">tauri::ipc::pr..</text></g><g><title>tauri::webview::Webview&lt;R&gt;::on_message (2 samples, 10.00%)</title><rect x="90.0000%" y="1269" width="10.0000%" height="15" fill="rgb(237,53,32)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1279.50">tauri::webview..</text></g><g><title>tauri::manager::AppManager&lt;R&gt;::run_invoke_handler (2 samples, 10.00%)</title><rect x="90.0000%" y="1253" width="10.0000%" height="15" fill="rgb(233,25,53)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1263.50">tauri::manager..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 10.00%)</title><rect x="90.0000%" y="1237" width="10.0000%" height="15" fill="rgb(210,40,34)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1247.50">&lt;alloc::boxed:..</text></g><g><title>subtle::main::{{closure}}::{{closure}} (2 samples, 10.00%)</title><rect x="90.0000%" y="1221" width="10.0000%" height="15" fill="rgb(241,220,44)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1231.50">subtle::main::..</text></g><g><title>subtle::media::send_next_video_frame (2 samples, 10.00%)</title><rect x="90.0000%" y="1205" width="10.0000%" height="15" fill="rgb(235,28,35)" fg:x="18" fg:w="2"/><text x="90.2500%" y="1215.50">subtle::media:..</text></g><g><title>tokio::sync::broadcast::Sender&lt;T&gt;::send (1 samples, 5.00%)</title><rect x="95.0000%" y="1189" width="5.0000%" height="15" fill="rgb(210,56,17)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1199.50">tokio:..</text></g><g><title>tokio::sync::broadcast::Shared&lt;T&gt;::notify_rx (1 samples, 5.00%)</title><rect x="95.0000%" y="1173" width="5.0000%" height="15" fill="rgb(224,130,29)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1183.50">tokio:..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 5.00%)</title><rect x="95.0000%" y="1157" width="5.0000%" height="15" fill="rgb(235,212,8)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1167.50">tokio:..</text></g><g><title>core::task::wake::Waker::wake (1 samples, 5.00%)</title><rect x="95.0000%" y="1141" width="5.0000%" height="15" fill="rgb(223,33,50)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1151.50">core::..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 5.00%)</title><rect x="95.0000%" y="1125" width="5.0000%" height="15" fill="rgb(219,149,13)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1135.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 5.00%)</title><rect x="95.0000%" y="1109" width="5.0000%" height="15" fill="rgb(250,156,29)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1119.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (1 samples, 5.00%)</title><rect x="95.0000%" y="1093" width="5.0000%" height="15" fill="rgb(216,193,19)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1103.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 5.00%)</title><rect x="95.0000%" y="1077" width="5.0000%" height="15" fill="rgb(216,135,14)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1087.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 5.00%)</title><rect x="95.0000%" y="1061" width="5.0000%" height="15" fill="rgb(241,47,5)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1071.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (1 samples, 5.00%)</title><rect x="95.0000%" y="1045" width="5.0000%" height="15" fill="rgb(233,42,35)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1055.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (1 samples, 5.00%)</title><rect x="95.0000%" y="1029" width="5.0000%" height="15" fill="rgb(231,13,6)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1039.50">tokio:..</text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 5.00%)</title><rect x="95.0000%" y="1013" width="5.0000%" height="15" fill="rgb(207,181,40)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1023.50">tokio:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 5.00%)</title><rect x="95.0000%" y="997" width="5.0000%" height="15" fill="rgb(254,173,49)" fg:x="19" fg:w="1"/><text x="95.2500%" y="1007.50">std::t..</text></g><g><title>tokio::runtime::context::with_scheduler::{{closure}} (1 samples, 5.00%)</title><rect x="95.0000%" y="981" width="5.0000%" height="15" fill="rgb(221,1,38)" fg:x="19" fg:w="1"/><text x="95.2500%" y="991.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 5.00%)</title><rect x="95.0000%" y="965" width="5.0000%" height="15" fill="rgb(206,124,46)" fg:x="19" fg:w="1"/><text x="95.2500%" y="975.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::{{closure}} (1 samples, 5.00%)</title><rect x="95.0000%" y="949" width="5.0000%" height="15" fill="rgb(249,21,11)" fg:x="19" fg:w="1"/><text x="95.2500%" y="959.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (1 samples, 5.00%)</title><rect x="95.0000%" y="933" width="5.0000%" height="15" fill="rgb(222,201,40)" fg:x="19" fg:w="1"/><text x="95.2500%" y="943.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (1 samples, 5.00%)</title><rect x="95.0000%" y="917" width="5.0000%" height="15" fill="rgb(235,61,29)" fg:x="19" fg:w="1"/><text x="95.2500%" y="927.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 5.00%)</title><rect x="95.0000%" y="901" width="5.0000%" height="15" fill="rgb(219,207,3)" fg:x="19" fg:w="1"/><text x="95.2500%" y="911.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 5.00%)</title><rect x="95.0000%" y="885" width="5.0000%" height="15" fill="rgb(222,56,46)" fg:x="19" fg:w="1"/><text x="95.2500%" y="895.50">tokio:..</text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 5.00%)</title><rect x="95.0000%" y="869" width="5.0000%" height="15" fill="rgb(239,76,54)" fg:x="19" fg:w="1"/><text x="95.2500%" y="879.50">tokio:..</text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 5.00%)</title><rect x="95.0000%" y="853" width="5.0000%" height="15" fill="rgb(231,124,27)" fg:x="19" fg:w="1"/><text x="95.2500%" y="863.50">tokio:..</text></g><g><title>tokio::runtime::io::driver::Handle::unpark (1 samples, 5.00%)</title><rect x="95.0000%" y="837" width="5.0000%" height="15" fill="rgb(249,195,6)" fg:x="19" fg:w="1"/><text x="95.2500%" y="847.50">tokio:..</text></g><g><title>mio::waker::Waker::wake (1 samples, 5.00%)</title><rect x="95.0000%" y="821" width="5.0000%" height="15" fill="rgb(237,174,47)" fg:x="19" fg:w="1"/><text x="95.2500%" y="831.50">mio::w..</text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 5.00%)</title><rect x="95.0000%" y="805" width="5.0000%" height="15" fill="rgb(206,201,31)" fg:x="19" fg:w="1"/><text x="95.2500%" y="815.50">mio::s..</text></g><g><title>mio::sys::unix::selector::Selector::wake (1 samples, 5.00%)</title><rect x="95.0000%" y="789" width="5.0000%" height="15" fill="rgb(231,57,52)" fg:x="19" fg:w="1"/><text x="95.2500%" y="799.50">mio::s..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 5.00%)</title><rect x="95.0000%" y="773" width="5.0000%" height="15" fill="rgb(248,177,22)" fg:x="19" fg:w="1"/><text x="95.2500%" y="783.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 5.00%)</title><rect x="95.0000%" y="757" width="5.0000%" height="15" fill="rgb(215,211,37)" fg:x="19" fg:w="1"/><text x="95.2500%" y="767.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 5.00%)</title><rect x="95.0000%" y="741" width="5.0000%" height="15" fill="rgb(241,128,51)" fg:x="19" fg:w="1"/><text x="95.2500%" y="751.50">backtr..</text></g></svg></svg>